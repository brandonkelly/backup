{% import "_includes/forms" as forms %}
{% set tab  = 1 %}
{% set tab2 = false %}
{% set tab3 = false %}

<nav id="tabs" class="tabs" style= "margin: 0 0 0 0;">
	<ul>
		<li>
			<a class="tab {{ tab == 1 ? ' sel' : '' }}" href="#tab-enupalslider-settings">
				{{ "Settings"|t('enupalslider') }}
			</a>
		</li>
		<li>
			<a class="tab {{ tab == 2 ? ' sel' : '' }} {{ tab2 ? 'error' : '' }}" href="#tab-enupalslider-controls">
				{{ "Controls"|t('enupalslider') }}
			</a>
		</li>
		<li>
			<a class="tab {{ tab == 3 ? ' sel' : '' }}" href="#tab-enupalslider-slides">
				{{ "Slides"|t('enupalslider') }}
			</a>
		</li>
	</ul>
</nav>

<div>
	<div class="{{ tab != 1 ? 'hidden' : '' }} meta" id="tab-enupalslider-settings">
		<div class="field enupal-field-heading">{{'Slider Options'|t('enupalslider')}}</div>
		{{ forms.textField({
			label: "Name"|t('enupalslider'),
			id: 'name',
			name: 'name',
			value: slider.name,
			required: true,
			errors: slider.getErrors('name')
		}) }}

		{{ forms.textField({
			label: "Handle"|t('enupalslider'),
			id: 'handle',
			name: 'handle',
			required: true,
			value: slider.handle,
			errors: slider.getErrors('handle')
		}) }}

		<div class="field enupal-field-heading">{{'General Options'|t('enupalslider')}}</div>

		{% set modeOptions = craft.enupalslider.getModes() %}
		{% set easingOptions = craft.enupalslider.getEasingOptions(slider.useCss) %}
		{% set preloadImagesOptions = craft.enupalslider.getPreloadImagesOptions() %}

		{{ forms.selectField({
			label: "Mode <span class='info'>Type of transition between slides.</span>"|t('enupalslider'),
			id: 'mode',
			name: 'mode',
			class: 'enupalslider',
			options: modeOptions,
			value: slider.mode,
			errors: slider.getErrors('mode')
		}) }}

		{{ forms.textField({
			label: "Slide Margin <span class='info'>Margin between each slide</span>"|t('enupalslider'),
			id: 'slideMargin',
			name: 'slideMargin',
			class: 'enupalslider',
			value: slider.slideMargin,
			errors: slider.getErrors('slideMargin')
		}) }}

		{{ forms.textField({
			label: "Speed <span class='info'>Slide transition duration (in ms).</span>"|t('enupalslider'),
			id: 'speed',
			name: 'speed',
			class: 'enupalslider',
			value: slider.speed,
			errors: slider.getErrors('speed')
		}) }}

		{{ forms.lightswitchField({
			label: "Random Start <span class='info'>Start slider on a random slide</span>"|t('enupalslider'),
			id: 'randomStart',
			name: 'randomStart',
			class: 'enupalslider',
			on: slider.randomStart,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.lightswitchField({
			label: "Infinite Loop <span class='info'>If checked, clicking 'Next' while on the last slide will transition to the first slide and vice-versa.</span>"|t('enupalslider'),
			id: 'infiniteLoop',
			name: 'infiniteLoop',
			class: 'enupalslider',
			on: slider.infiniteLoop,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}
		{{ forms.lightswitchField({
			label: "Captions <span class='info'>Include image captions.</span>"|t('enupalslider'),
			id: 'captions',
			name: 'captions',
			class: 'enupalslider',
			on: slider.captions,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}
		<div class="field enupal-field-heading">{{'Ticker Options'|t('enupalslider')}}</div>
		{{ forms.lightswitchField({
			label: "Ticker <span class='info'>Use slider in ticker mode (similar to a news ticker).</span>"|t('enupalslider'),
			id: 'ticker',
			name: 'ticker',
			class: 'enupalslider',
			on: slider.ticker,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.lightswitchField({
			label: "Ticker Hover <span class='info'>Ticker will pause when mouse hovers over slider. Note: this functionality does NOT work if using CSS transitions!</span>"|t('enupalslider'),
			id: 'tickerHover',
			name: 'tickerHover',
			class: 'enupalslider',
			on: slider.tickerHover,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}
		<div class="field enupal-field-heading">{{'Slider Options'|t('enupalslider')}}</div>
		{{ forms.lightswitchField({
			label: "Adaptive Height <span class='info'>Dynamically adjust slider height based on each slide's height.</span>"|t('enupalslider'),
			id: 'adaptiveHeight',
			name: 'adaptiveHeight',
			class: 'enupalslider',
			on: slider.adaptiveHeight,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.lightswitchField({
			label: "Adaptive Height Speed <span class='info'>Slide height transition duration (in ms). Note: only used if Adaptive Height is checked.</span>"|t('enupalslider'),
			id: 'adaptiveHeightSpeed',
			name: 'adaptiveHeightSpeed',
			class: 'enupalslider',
			on: slider.adaptiveHeightSpeed,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.lightswitchField({
			label: "Has Video? <span class='info'>Check this if any slides contain a video.</span>"|t('enupalslider'),
			id: 'video',
			name: 'video',
			class: 'enupalslider',
			on: slider.video,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.lightswitchField({
			label: "Responsive <span class='info'>Enable or disable auto resize of the slider. Useful if you need to use fixed width sliders.</span>"|t('enupalslider'),
			id: 'responsive',
			name: 'responsive',
			class: 'enupalslider',
			on: slider.responsive,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}
		<div class="field enupal-field-heading">{{'Transitions Options'|t('enupalslider')}}</div>
		{{ forms.lightswitchField({
			label: "Use Css <span class='info'>If checked, CSS transitions will be used for horizontal and vertical slide animations (this uses native hardware acceleration). If unchecked, jQuery animate() will be used.</span>"|t('enupalslider'),
			id: 'useCss',
			name: 'useCss',
			class: 'enupalslider',
			on: slider.useCss,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.selectField({
			label: "Easing <span class='info'>The type of 'easing' to use during transitions.</span>"|t('enupalslider'),
			id: 'easing',
			name: 'easing',
			class: 'enupalslider',
			options: easingOptions,
			value: slider.easing,
			errors: slider.getErrors('easing')
		}) }}

		{{ forms.selectField({
			label: "Preload Images <span class='info'>If 'all', preloads all images before starting the slider. If 'visible', preloads only images in the initially visible slides before starting the slider (tip: use 'visible' if all slides are identical dimensions).</span>"|t('enupalslider'),
			id: 'preloadImages',
			name: 'preloadImages',
			class: 'enupalslider',
			options: preloadImagesOptions,
			value: slider.preloadImages,
			errors: slider.getErrors('preloadImages')
		}) }}
	</div><!-- settings div -->

	<div class="{{ tab != 2 ? 'hidden' : '' }} meta" id="tab-enupalslider-controls">
		{% set pagerTypeOptions = craft.enupalslider.getPagerTypeOptions() %}
		<div class="field enupal-field-heading">{{'Pager Options'|t('enupalslider')}}</div>
		{{ forms.lightswitchField({
			label: "Pager <span class='info'>If enabled, a pager will be added.</span>"|t('enupalslider'),
			id: 'pager',
			name: 'pager',
			class: 'enupalslider',
			on: slider.pager,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.selectField({
			label: "Pager Type <span class='info'>If 'full', a pager link will be generated for each slide. If 'short', a x / y pager will be used (ex. 1 / 5)."|t('enupalslider'),
			id: 'pagerType',
			name: 'pagerType',
			class: 'enupalslider',
			options: pagerTypeOptions,
			value: slider.pagerType,
			errors: slider.getErrors('pagerType')
		}) }}

		{{ forms.textField({
			label: "Pager Short Separator <span class='info'>If 'short', pager will use this value as the separating character</span>"|t('enupalslider'),
			id: 'pagerShortSeparator',
			name: 'pagerShortSeparator',
			class: 'enupalslider',
			value: slider.pagerShortSeparator,
			errors: slider.getErrors('pagerShortSeparator')
		}) }}

		{{ forms.textField({
			label: "Pager Selector <span class='info'>Element used to populate the pager. By default, the pager is appended to the bx-viewport. Note: Use jQuery selectors.</span>"|t('enupalslider'),
			id: 'pagerSelector',
			name: 'pagerSelector',
			class: 'enupalslider',
			value: slider.pagerSelector,
			errors: slider.getErrors('pagerSelector')
		}) }}

		{{ forms.lightswitchField({
			label: "Thumbnail Pager <span class='info'>Enable thumbnails images as pager</span>"|t('enupalslider'),
			id: 'thumbnailPager',
			name: 'thumbnailPager',
			class: 'enupalslider',
			on: slider.thumbnailPager,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		<div class="field enupal-field-heading">{{'Controls Options'|t('enupalslider')}}</div>

		{{ forms.lightswitchField({
			label: "Controls <span class='info'>If enabled, 'Next' / 'Prev' controls will be added.</span>"|t('enupalslider'),
			id: 'controls',
			name: 'controls',
			class: 'enupalslider',
			on: slider.controls,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.textField({
			label: "Next Text <span class='info'>Text to be used for the 'Next' control.</span>"|t('enupalslider'),
			id: 'nextText',
			name: 'nextText',
			class: 'enupalslider',
			value: slider.nextText,
			errors: slider.getErrors('nextText')
		}) }}

		{{ forms.textField({
			label: "Prev Text <span class='info'>Text to be used for the 'Prev' control.</span>"|t('enupalslider'),
			id: 'prevText',
			name: 'prevText',
			class: 'enupalslider',
			value: slider.prevText,
			errors: slider.getErrors('prevText')
		}) }}

		{{ forms.textField({
			label: "Next Selector <span class='info'>Element used to populate the 'Next' control.</span>"|t('enupalslider'),
			id: 'nextSelector',
			name: 'nextSelector',
			class: 'enupalslider',
			value: slider.nextSelector,
			errors: slider.getErrors('nextSelector')
		}) }}

		{{ forms.textField({
			label: "Prev Selector <span class='info'>Element used to populate the 'Prev' control.</span>"|t('enupalslider'),
			id: 'prevSelector',
			name: 'prevSelector',
			class: 'enupalslider',
			value: slider.prevSelector,
			errors: slider.getErrors('prevSelector')
		}) }}

		{{ forms.lightswitchField({
			label: "Auto Controls <span class='info'>If enabled, 'Start' / 'Stop' controls will be added.</span>"|t('enupalslider'),
			id: 'autoControls',
			name: 'autoControls',
			class: 'enupalslider',
			on: slider.autoControls,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.textField({
			label: "Start Text <span class='info'>Text to be used for the 'Start' control.</span>"|t('enupalslider'),
			id: 'startText',
			name: 'startText',
			class: 'enupalslider',
			value: slider.startText,
			errors: slider.getErrors('startText')
		}) }}

		{{ forms.textField({
			label: "Stop Text <span class='info'>Text to be used for the 'Stop' control.</span>"|t('enupalslider'),
			id: 'stopText',
			name: 'stopText',
			class: 'enupalslider',
			value: slider.stopText,
			errors: slider.getErrors('stopText')
		}) }}

		{{ forms.lightswitchField({
			label: "Auto Controls Combine <span class='info'>When slideshow is playing only 'Stop' control is displayed and vice-versa.</span>"|t('enupalslider'),
			id: 'autoControlsCombine',
			name: 'autoControlsCombine',
			class: 'enupalslider',
			on: slider.autoControlsCombine,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.textField({
			label: "Auto Controls Selector <span class='info'>Element used to populate the auto controls.</span>"|t('enupalslider'),
			id: 'autoControlsSelector',
			name: 'autoControlsSelector',
			class: 'enupalslider',
			value: slider.autoControlsSelector,
			errors: slider.getErrors('autoControlsSelector')
		}) }}

		{{ forms.lightswitchField({
			label: "Keyboard Enabled <span class='info'>Enable keyboard navigation for visible sliders</span>"|t('enupalslider'),
			id: 'keyboardEnabled',
			name: 'keyboardEnabled',
			class: 'enupalslider',
			on: slider.keyboardEnabled,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

	</div><!-- controls div -->

	<div class="{{ tab != 3 ? 'hidden' : '' }} meta" id="tab-enupalslider-slides">
		{% set autoDirectionOptions = craft.enupalslider.getAutoDirectionOptions() %}
		<div class="field enupal-field-heading">{{'Auto Options'|t('enupalslider')}}</div>
		{{ forms.lightswitchField({
			label: "Auto <span class='info'>Slides will automatically transition</span>"|t('enupalslider'),
			id: 'auto',
			name: 'auto',
			class: 'enupalslider',
			on: slider.auto,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.textField({
			label: "Pause <span class='info'>The amount of time (in ms) between each auto transition</span>"|t('enupalslider'),
			id: 'pause',
			name: 'pause',
			class: 'enupalslider',
			value: slider.pause,
			errors: slider.getErrors('pause')
		}) }}

		{{ forms.lightswitchField({
			label: "Auto Start <span class='info'>Auto show starts playing on load. If disabled, slideshow will start when the 'Start' control is clicked</span>"|t('enupalslider'),
			id: 'autoStart',
			name: 'autoStart',
			class: 'enupalslider',
			on: slider.autoStart,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.selectField({
			label: "Auto Direction <span class='info'>The direction of auto show slide transitions"|t('enupalslider'),
			id: 'autoDirection',
			name: 'autoDirection',
			class: 'enupalslider',
			options: autoDirectionOptions,
			value: slider.autoDirection,
			errors: slider.getErrors('autoDirection')
		}) }}

		{{ forms.lightswitchField({
			label: "Auto Hover <span class='info'>Auto show will pause when mouse hovers over slider</span>"|t('enupalslider'),
			id: 'autoHover',
			name: 'autoHover',
			class: 'enupalslider',
			on: slider.autoHover,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}

		{{ forms.textField({
			label: "Auto Delay <span class='info'>Time (in ms) auto show should wait before starting</span>"|t('enupalslider'),
			id: 'autoDelay',
			name: 'autoDelay',
			class: 'enupalslider',
			value: slider.autoDelay,
			errors: slider.getErrors('autoDelay')
		}) }}

		<div class="field enupal-field-heading">{{'Carousel Options'|t('enupalslider')}}</div>

		{{ forms.textField({
			label: "Min Slides <span class='info'>The maximum number of slides to be shown. Slides will be sized up if carousel becomes larger than the original size.</span>"|t('enupalslider'),
			id: 'minSlides',
			name: 'minSlides',
			class: 'enupalslider',
			value: slider.minSlides,
			errors: slider.getErrors('minSlides')
		}) }}

		{{ forms.textField({
			label: "Max Slides <span class='info'>The maximum number of slides to be shown. Slides will be sized up if carousel becomes larger than the original size.</span>"|t('enupalslider'),
			id: 'maxSlides',
			name: 'maxSlides',
			class: 'enupalslider',
			value: slider.maxSlides,
			errors: slider.getErrors('maxSlides')
		}) }}

		{{ forms.textField({
			label: "Move Slides <span class='info'>The number of slides to move on transition. This value must be >= minSlides, and <= maxSlides. If zero (default), the number of fully-visible slides will be used.</span>"|t('enupalslider'),
			id: 'moveSlides',
			name: 'moveSlides',
			class: 'enupalslider',
			value: slider.moveSlides,
			errors: slider.getErrors('moveSlides')
		}) }}

		{{ forms.textField({
			label: "Slide Width <span class='info'>The width of each slide. This setting is required for all horizontal carousels!</span>"|t('enupalslider'),
			id: 'slideWidth',
			name: 'slideWidth',
			class: 'enupalslider',
			value: slider.slideWidth,
			errors: slider.getErrors('slideWidth')
		}) }}

		{{ forms.lightswitchField({
			label: "Shrink Items <span class='info'>The Carousel will only show whole items and shrink the images to fit the viewport based on maxSlides/MinSlides.</span>"|t('enupalslider'),
			id: 'shrinkItems',
			name: 'shrinkItems',
			class: 'enupalslider',
			on: slider.shrinkItems,
			onLabel: "On"|t('enupalslider'),
			offLabel: "Off"|t('enupalslider')
		}) }}
	</div><!-- slides div -->
</div>
